"use client"
import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Search, Bug } from 'lucide-react'

interface DataAlignmentData {
  caf: number
  mos: number
  install: number
  readiness: number
  activated: number
  rfc: number
  hn: number
  endorse: number
}

interface DataAlignmentProps {
  data: DataAlignmentData
}

export function DataAlignmentChart({ data }: DataAlignmentProps) {
  const [hoveredBar, setHoveredBar] = useState<{
    x: number
    y: number
    label: string
    value: number
  } | null>(null)

  // Chart dimensions
  const width = 900
  const height = 400
  const padding = 80
  const chartWidth = width - (padding * 2)
  const chartHeight = height - (padding * 2)

  // Data for bars
  const bars = [
    { key: 'caf', label: 'CAF', value: data.caf, color: '#F59E0B' },
    { key: 'mos', label: 'MOS', value: data.mos, color: '#F59E0B' },
    { key: 'install', label: 'INSTALL', value: data.install, color: '#F59E0B' },
    { key: 'readiness', label: 'READINESS', value: data.readiness, color: '#F59E0B' },
    { key: 'activated', label: 'ACTIVATED', value: data.activated, color: '#F59E0B' },
    { key: 'rfc', label: 'RFC', value: data.rfc, color: '#F59E0B' },
    { key: 'hn', label: 'HN', value: data.hn, color: '#F59E0B' },
    { key: 'endorse', label: 'ENDORSE', value: data.endorse, color: '#F59E0B' }
  ]

  // Find max value for scaling
  const maxValue = Math.max(...bars.map(bar => bar.value))

  // Generate bars
  const generateBars = () => {
    return bars.map((bar, index) => {
      const x = padding + (index / (bars.length - 1)) * chartWidth
      const barWidth = chartWidth / bars.length * 0.8
      const barHeight = (bar.value / maxValue) * chartHeight
      const y = height - padding - barHeight

      return (
        <g key={bar.key}>
          {/* Bar */}
          <rect
            x={x - barWidth / 2}
            y={y}
            width={barWidth}
            height={barHeight}
            fill={bar.color}
            rx={4}
            ry={4}
            style={{ cursor: 'pointer' }}
            onMouseEnter={() => setHoveredBar({
              x: x + 450, // Center tooltip
              y: y - 20,
              label: bar.label,
              value: bar.value
            })}
            onMouseLeave={() => setHoveredBar(null)}
          />
          
          {/* Value label above bar */}
          <text
            x={x}
            y={y - 10}
            textAnchor="middle"
            className="text-sm font-bold fill-white"
            style={{ fontSize: '12px', fontFamily: 'Arial, sans-serif' }}
          >
            {bar.value.toLocaleString()}
          </text>
          
          {/* X-axis label */}
          <text
            x={x}
            y={height - padding + 25}
            textAnchor="middle"
            className="text-xs fill-white"
            style={{ fontSize: '11px', fontFamily: 'Arial, sans-serif' }}
            transform={`rotate(45, ${x}, ${height - padding + 25})`}
          >
            {bar.label}
          </text>
        </g>
      )
    })
  }

  return (
    <Card className="bg-gradient-to-r from-slate-800 to-slate-900 border-slate-700">
      <CardHeader className="pb-6">
        <div className="flex items-center space-x-3">
          <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center">
            <div className="relative">
              <Search className="h-6 w-6 text-white" />
              <Bug className="h-3 w-3 text-white absolute -top-1 -right-1" />
            </div>
          </div>
          <div>
            <CardTitle className="text-2xl font-bold text-white">Data Alignment</CardTitle>
            <p className="text-gray-400 text-sm">Distribution across different approval stages</p>
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-6">
        <div className="relative overflow-x-auto">
          {/* Hover Tooltip */}
          {hoveredBar && (
            <div 
              className="absolute z-50 bg-slate-800 border border-slate-600 rounded-lg p-3 shadow-lg"
              style={{
                left: hoveredBar.x,
                top: hoveredBar.y,
                transform: 'translate(-50%, -100%)',
                pointerEvents: 'none'
              }}
            >
              <div className="text-white text-sm font-medium mb-2">
                {hoveredBar.label}
              </div>
              <div className="text-xs text-gray-300">
                Count: <span className="text-white font-medium">{hoveredBar.value.toLocaleString()}</span>
              </div>
            </div>
          )}
          
          <svg width={width} height={height} className="mx-auto">
            {/* Grid Lines */}
            <defs>
              <pattern id="grid-data-alignment" x="0" y="0" width="50" height="50" patternUnits="userSpaceOnUse">
                <path d="M 50 0 L 0 0 0 50" fill="none" stroke="#374151" strokeWidth="1" opacity="0.3"/>
              </pattern>
            </defs>
            
            {/* Background with grid */}
            <rect width={width} height={height} fill="url(#grid-data-alignment)" />
            
            {/* X-axis line */}
            <line
              x1={padding}
              y1={height - padding}
              x2={width - padding}
              y2={height - padding}
              stroke="#6B7280"
              strokeWidth="2"
            />
            
            {/* Bars */}
            {generateBars()}
          </svg>
        </div>
        

      </CardContent>
    </Card>
  )
} 