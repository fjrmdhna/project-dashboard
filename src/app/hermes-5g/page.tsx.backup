"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { 
  Search, 
  Filter, 
  Download, 
  RefreshCw, 
  MapPin, 
  Calendar, 
  Building2, 
  Signal,
  Star,
  TrendingUp,
  AlertCircle,
  CheckCircle,
  Clock,
  Users,
  Database,
  ClipboardCheck,
  Eye,
  Server,
  Zap,
  FileText,
  ThumbsUp,
  Bell,
  Award,
  Radio
} from "lucide-react"
import { ReadinessChart } from "@/components/readiness-chart"
import { ActivatedChart } from "@/components/activated-chart"
import { ProgressCurve } from "@/components/progress-curve"
import { DailyRunrate } from "@/components/daily-runrate"
import { DataAlignmentChart } from "@/components/data-alignment-chart"
import { Top5IssueChart } from "@/components/top-5-issue-chart"
import { NanoClusterChart } from "@/components/nano-cluster-chart"
import { FilterSection } from "@/components/FilterSection"

interface SiteData5G {
  system_key: string
  site_id: string
  site_name: string
  vendor_name: string
  site_status: string
  region: string
  year: string
  program_name: string
  "SBOQ.project_type": string
  vendor_code: string
  "5g_readiness_date": string | null
  "5g_activation_date": string | null
  cx_acceptance_status: string
  long: number | null
  lat: number | null
  created_at: string
  site_category?: string
  scope_of_work?: string
  region_wise?: string
  region_circle?: string
}

interface PaginationInfo {
  currentPage: number
  pageSize: number
  totalRecords: number
  totalPages: number
  hasNext: boolean
  hasPrev: boolean
}

interface StatsData {
  total: number
  scope: number
  caf: number
  mos: number
  installation: number
  fiveGReadiness: number
  fiveGActivation: number
  rfc: number
  endorse: number
  hotnews: number
  pac: number
  clusterAtp: number
}

export default function Hermes5GPage() {
  const [sites, setSites] = useState<SiteData5G[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState("all")
  const [regionFilter, setRegionFilter] = useState("all")
  const [vendorFilter, setVendorFilter] = useState("all")
  const [programFilter, setProgramFilter] = useState("all")
  const [cityFilter, setCityFilter] = useState("all")
  const [filterOptions, setFilterOptions] = useState<{
    vendors: string[]
    programs: string[]
    cities: string[]
  }>({
    vendors: [],
    programs: [],
    cities: []
  })
  const [currentPage, setCurrentPage] = useState(1)
  const [pageSize, setPageSize] = useState(50)
  const [pagination, setPagination] = useState<PaginationInfo | null>(null)
  const [stats, setStats] = useState<StatsData | null>(null)
  const [totalRecords, setTotalRecords] = useState(0)
  const [readinessChartData, setReadinessChartData] = useState<any[]>([])
  const [activatedChartData, setActivatedChartData] = useState<any[]>([])
  const [progressCurveData, setProgressCurveData] = useState<any[]>([])
  const [dailyRunrateData, setDailyRunrateData] = useState<any[]>([])
  const [dataAlignmentData, setDataAlignmentData] = useState<any>(null)
  const [top5IssueData, setTop5IssueData] = useState<any[]>([])
  const [top5IssueStats, setTop5IssueStats] = useState<{ top5Count: number; totalCount: number }>({ top5Count: 0, totalCount: 0 })
  const [nanoClusterData, setNanoClusterData] = useState<any>(null)

  useEffect(() => {
    fetchSiteData()
    fetchFilterOptions()
  }, [])

  // Separate useEffect for filter-dependent data
  useEffect(() => {
    fetchReadinessChartData()
    fetchActivatedChartData()
    fetchProgressCurveData()
    fetchDailyRunrateData()
    fetchDataAlignmentData()
    fetchTop5IssueData()
    fetchNanoClusterData()
  }, [vendorFilter, programFilter, cityFilter])

  const fetchReadinessChartData = async () => {
    try {
      // Build query parameters for filters
      const params = new URLSearchParams({
        vendorFilter: vendorFilter,
        programFilter: programFilter,
        cityFilter: cityFilter
      })
      
      const response = await fetch(`/api/hermes-5g/readiness-chart?${params}`)
      if (response.ok) {
        const result = await response.json()
        if (result.status === 'success') {
          setReadinessChartData(result.data)
        }
      }
    } catch (error) {
      console.error('Error fetching readiness chart data:', error)
    }
  }

  const fetchActivatedChartData = async () => {
    try {
      // Build query parameters for filters
      const params = new URLSearchParams({
        vendorFilter: vendorFilter,
        programFilter: programFilter,
        cityFilter: cityFilter
      })
      
      const response = await fetch(`/api/hermes-5g/activated-chart?${params}`)
      if (response.ok) {
        const result = await response.json()
        if (result.status === 'success') {
          setActivatedChartData(result.data)
        }
      }
    } catch (error) {
      console.error('Error fetching activated chart data:', error)
    }
  }

  const fetchProgressCurveData = async () => {
    try {
      // Build query parameters for filters
      const params = new URLSearchParams({
        vendorFilter: vendorFilter,
        programFilter: programFilter,
        cityFilter: cityFilter
      })
      
      const response = await fetch(`/api/hermes-5g/progress-curve?${params}`)
      if (response.ok) {
        const result = await response.json()
        if (result.status === 'success') {
          setProgressCurveData(result.data)
        }
      }
    } catch (error) {
      console.error('Error fetching progress curve data:', error)
    }
  }

  const fetchDailyRunrateData = async () => {
    try {
      // Build query parameters for filters
      const params = new URLSearchParams({
        vendorFilter: vendorFilter,
        programFilter: programFilter,
        cityFilter: cityFilter
      })
      
      const response = await fetch(`/api/hermes-5g/daily-runrate?${params}`)
      if (response.ok) {
        const result = await response.json()
        if (result.status === 'success') {
          setDailyRunrateData(result.data)
        }
      }
    } catch (error) {
      console.error('Error fetching daily runrate data:', error)
    }
  }

  const fetchDataAlignmentData = async () => {
    try {
      // Build query parameters for filters
      const params = new URLSearchParams({
        vendorFilter: vendorFilter,
        programFilter: programFilter,
        cityFilter: cityFilter
      })
      
      const response = await fetch(`/api/hermes-5g/data-alignment?${params}`)
      if (response.ok) {
        const result = await response.json()
        if (result.status === 'success') {
          setDataAlignmentData(result.data)
        }
      }
    } catch (error) {
      console.error('Error fetching data alignment data:', error)
    }
  }

  const fetchTop5IssueData = async () => {
    try {
      // Build query parameters for filters
      const params = new URLSearchParams({
        vendorFilter: vendorFilter,
        programFilter: programFilter,
        cityFilter: cityFilter
      })
      
      const response = await fetch(`/api/hermes-5g/top-5-issue?${params}`)
      if (response.ok) {
        const result = await response.json()
        if (result.status === 'success') {
          setTop5IssueData(result.data)
          setTop5IssueStats({
            top5Count: result.top5Count,
            totalCount: result.totalCount
          })
        }
      }
    } catch (error) {
      console.error('Error fetching top 5 issue data:', error)
    }
  }

  const fetchNanoClusterData = async () => {
    try {
      // Build query parameters for filters
      const params = new URLSearchParams({
        vendorFilter: vendorFilter,
        programFilter: programFilter,
        cityFilter: cityFilter
      })
      
      const response = await fetch(`/api/hermes-5g/nano-cluster?${params}`)
      if (response.ok) {
        const result = await response.json()
        if (result.status === 'success') {
          setNanoClusterData(result.data)
        }
      }
    } catch (error) {
      console.error('Error fetching nano cluster data:', error)
    }
  }

  const fetchFilterOptions = async () => {
    try {
      const response = await fetch('/api/hermes-5g/filter-options')
      if (response.ok) {
        const result = await response.json()
        if (result.status === 'success') {
          setFilterOptions(result.data)
        }
      }
    } catch (error) {
      console.error('Error fetching filter options:', error)
    }
  }

  const fetchSiteData = async (page: number = 1, search: string = '', status: string = 'all', region: string = 'all', vendor: string = 'all') => {
    try {
      setLoading(true)
      
      // Build query parameters
      const params = new URLSearchParams({
        page: page.toString(),
        pageSize: pageSize.toString(),
        search: search,
        status: status,
        regionFilter: region,
        vendorFilter: vendor
      })
      
      const response = await fetch(`/api/hermes-5g?${params}`)
      if (response.ok) {
        const result = await response.json()
        setSites(result.data)
        setPagination(result.pagination)
        setStats(result.stats)
        setTotalRecords(result.pagination.totalRecords)
        setCurrentPage(page)
      } else {
        console.error('Failed to fetch data:', response.statusText)
        // Set empty data on error
        setSites([])
        setPagination(null)
        setStats(null)
        setTotalRecords(0)
      }
    } catch (error) {
      console.error("Error fetching site data:", error)
      // Set empty data on error
      setSites([])
      setPagination(null)
      setStats(null)
      setTotalRecords(0)
    } finally {
      setLoading(false)
    }
  }

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case "active":
        return "bg-green-100 text-green-800 border-green-200"
      case "planning":
        return "bg-blue-100 text-blue-800 border-blue-200"
      case "in progress":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getAcceptanceStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case "approved":
        return "bg-green-100 text-green-800 border-green-200"
      case "pending":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "in review":
        return "bg-blue-100 text-blue-800 border-blue-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  // Handle search and filter changes
  const handleSearch = (value: string) => {
    setSearchTerm(value)
    setCurrentPage(1)
    fetchSiteData(1, value, statusFilter, regionFilter, vendorFilter)
  }

  const handleStatusFilter = (value: string) => {
    setStatusFilter(value)
    setCurrentPage(1)
    fetchSiteData(1, searchTerm, value, regionFilter, vendorFilter)
  }

  const handleRegionFilter = (value: string) => {
    setRegionFilter(value)
    setCurrentPage(1)
    fetchSiteData(1, searchTerm, statusFilter, value, vendorFilter)
  }

  const handleVendorFilter = (value: string) => {
    setVendorFilter(value)
    setCurrentPage(1)
    // Charts will automatically re-fetch due to useEffect dependency
  }

  const handleProgramFilter = (value: string) => {
    setProgramFilter(value)
    setCurrentPage(1)
    // Charts will automatically re-fetch due to useEffect dependency
  }

  const handleCityFilter = (value: string) => {
    setCityFilter(value)
    setCurrentPage(1)
    // Charts will automatically re-fetch due to useEffect dependency
  }

  const handlePageChange = (page: number) => {
    setCurrentPage(page)
    fetchSiteData(page, searchTerm, statusFilter, regionFilter, vendorFilter)
  }

  // Use stats from API response instead of calculating from local data

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="border-b bg-card">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-foreground">Hermes 5G Dashboard</h1>
              <p className="text-muted-foreground mt-2">
                High-performance 5G site monitoring and management system
              </p>
            </div>
            <div className="flex items-center space-x-3">
              <Button variant="outline" onClick={() => fetchSiteData()}>
                <RefreshCw className="h-4 w-4 mr-2" />
                Refresh
              </Button>
              <Button>
                <Download className="h-4 w-4 mr-2" />
                Export Data
              </Button>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        {/* Filters and Search */}
        <Card className="mb-6">
            <CardContent className="p-4">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <input
                    type="text"
                    placeholder="Search sites, vendors, or IDs..."
                    className="w-full pl-10 pr-4 py-2 border border-input rounded-md bg-background text-foreground"
                    value={searchTerm}
                    onChange={(e) => handleSearch(e.target.value)}
                  />
                </div>
              </div>
              
              <div className="flex gap-2">
                <select
                  className="px-3 py-2 border border-input rounded-md bg-background text-foreground"
                  value={vendorFilter}
                  onChange={(e) => handleVendorFilter(e.target.value)}
                >
                  <option value="all">All Vendors</option>
                  {filterOptions.vendors.map((vendor) => (
                    <option key={vendor} value={vendor}>{vendor}</option>
                  ))}
                </select>
                
                <select
                  className="px-3 py-2 border border-input rounded-md bg-background text-foreground"
                  value={programFilter}
                  onChange={(e) => handleProgramFilter(e.target.value)}
                >
                  <option value="all">All Programs</option>
                  {filterOptions.programs.map((program) => (
                    <option key={program} value={program}>{program}</option>
                  ))}
                </select>
                
                <select
                  className="px-3 py-2 border border-input rounded-md bg-background text-foreground"
                  value={cityFilter}
                  onChange={(e) => handleCityFilter(e.target.value)}
                >
                  <option value="all">All Cities</option>
                  {filterOptions.cities.map((city) => (
                    <option key={city} value={city}>{city}</option>
                  ))}
                </select>
                </div>
              </div>
            </CardContent>
          </Card>
          
        {/* Stats Dashboard */}
        <div className="bg-gradient-to-r from-slate-800 to-slate-900 rounded-xl p-6 mb-6">
          <div className="flex flex-col lg:flex-row items-start lg:items-center justify-between mb-6">
            {/* Total Sites Section */}
            <div className="flex items-center space-x-4 mb-4 lg:mb-0">
              <div className="relative">
                <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center">
                  <TrendingUp className="h-8 w-8 text-white" />
                </div>
                <div className="absolute -top-2 -right-2 w-6 h-6 bg-blue-400 rounded-full flex items-center justify-center">
                  <span className="text-xs font-bold text-white">1</span>
                </div>
              </div>
              <div>
                <p className="text-4xl font-bold text-blue-300">{stats?.total || 0}</p>
                <p className="text-gray-400 text-lg">Total Sites</p>
              </div>
            </div>

            {/* Divider */}
            <div className="hidden lg:block w-px h-16 bg-gray-600 mx-8"></div>

            {/* Metrics Grid */}
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-6 flex-1">
              {/* CAF - caf_approved */}
              <div className="text-center">
                <div className="flex items-center justify-center mb-2">
                  <ClipboardCheck className="h-4 w-4 text-blue-400" />
                </div>
                <p className="text-2xl font-bold text-blue-300">{stats?.caf || 0}</p>
                <p className="text-gray-400 text-sm">CAF</p>
              </div>

              {/* MOS - mos_af */}
              <div className="text-center">
                <div className="flex items-center justify-center mb-2">
                  <Eye className="h-4 w-4 text-blue-400" />
                </div>
                <p className="text-2xl font-bold text-blue-300">{stats?.mos || 0}</p>
                <p className="text-gray-400 text-sm">MOS</p>
              </div>

              {/* INSTALL - ic_000040_af */}
              <div className="text-center">
                <div className="flex items-center justify-center mb-2">
                  <Server className="h-4 w-4 text-blue-400" />
                </div>
                <p className="text-2xl font-bold text-blue-300">{stats?.installation || 0}</p>
                <p className="text-gray-400 text-sm">INSTALL</p>
              </div>

              {/* READINESS - imp_integ_af */}
              <div className="text-center">
                <div className="flex items-center justify-center mb-2">
                  <Signal className="h-4 w-4 text-blue-400" />
                </div>
                <p className="text-2xl font-bold text-blue-300">{stats?.fiveGReadiness || 0}</p>
                <p className="text-gray-400 text-sm">READINESS</p>
              </div>

              {/* ACTIVATED - rfs_af */}
              <div className="text-center">
                <div className="flex items-center justify-center mb-2">
                  <Zap className="h-4 w-4 text-blue-400" />
                </div>
                <p className="text-2xl font-bold text-blue-300">{stats?.fiveGActivation || 0}</p>
                <p className="text-gray-400 text-sm">ACTIVATED</p>
              </div>

              {/* PATP - cluster_acceptance_af */}
              <div className="text-center">
                <div className="flex items-center justify-center mb-2">
                  <Radio className="h-4 w-4 text-blue-400" />
                </div>
                <p className="text-2xl font-bold text-blue-300">{stats?.clusterAtp || 0}</p>
                <p className="text-gray-400 text-sm">PATP</p>
              </div>

              {/* HOTNEWS - hotnews_af */}
              <div className="text-center">
                <div className="flex items-center justify-center mb-2">
                  <Bell className="h-4 w-4 text-blue-400" />
                </div>
                <p className="text-2xl font-bold text-blue-300">{stats?.hotnews || 0}</p>
                <p className="text-gray-400 text-sm">HOTNEWS</p>
              </div>

              {/* ENDORSE - endorse_af */}
              <div className="text-center">
                <div className="flex items-center justify-center mb-2">
                  <ThumbsUp className="h-4 w-4 text-blue-400" />
                </div>
                <p className="text-2xl font-bold text-blue-300">{stats?.endorse || 0}</p>
                <p className="text-gray-400 text-sm">ENDORSE</p>
              </div>
            </div>
          </div>

                      {/* Bottom Divider Lines */}
            <div className="border-t border-gray-600 pt-4">
              <div className="w-full h-0.5 bg-gray-600"></div>
              <div className="w-full h-0.5 bg-gray-600 mt-1"></div>
            </div>
          </div>



          {/* 5G Readiness Chart */}
          <div className="mb-6">
            <ReadinessChart data={readinessChartData} />
          </div>

                    {/* 5G Activated Chart */}
          <div className="mb-6">
            <ActivatedChart data={activatedChartData} />
          </div>

          {/* Progress Curve Chart */}
          <div className="mb-6">
            <ProgressCurve data={progressCurveData} />
          </div>

          {/* Daily Runrate Chart */}
          <div className="mb-6">
            <DailyRunrate data={dailyRunrateData} />
          </div>

          {/* Data Alignment Chart */}
          <div className="mb-6">
            {dataAlignmentData && <DataAlignmentChart data={dataAlignmentData} />}
          </div>

          {/* Top 5 Issue Chart */}
          <div className="mb-6">
            {top5IssueData.length > 0 && (
              <Top5IssueChart 
                data={top5IssueData} 
                top5Count={top5IssueStats.top5Count}
                totalCount={top5IssueStats.totalCount}
              />
            )}
          </div>

          {/* Nano Cluster Chart */}
          <div className="mb-6">
            {nanoClusterData && <NanoClusterChart data={nanoClusterData} />}
        </div>

        {/* Filters and Search */}
        <Card className="mb-6">
          <CardContent className="p-4">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <input
                    type="text"
                    placeholder="Search sites, vendors, or IDs..."
                    className="w-full pl-10 pr-4 py-2 border border-input rounded-md bg-background text-foreground"
                    value={searchTerm}
                    onChange={(e) => handleSearch(e.target.value)}
                  />
                </div>
              </div>
              
              <div className="flex gap-2">
                <select
                  className="px-3 py-2 border border-input rounded-md bg-background text-foreground"
                  value={statusFilter}
                  onChange={(e) => handleStatusFilter(e.target.value)}
                >
                  <option value="all">All Status</option>
                  <option value="12. On Air">On Air</option>
                  <option value="00D. Hold">Hold</option>
                  <option value="07. RFI">RFI</option>
                  <option value="08. CRFI">CRFI</option>
                  <option value="09. MOS">MOS</option>
                  <option value="10. Installation">Installation</option>
                  <option value="11. Integration">Integration</option>
                </select>
                
                <select
                  className="px-3 py-2 border border-input rounded-md bg-background text-foreground"
                  value={regionFilter}
                  onChange={(e) => handleRegionFilter(e.target.value)}
                >
                  <option value="all">All Regions</option>
                  <option value="WJRO">WJRO</option>
                  <option value="EJRO">EJRO</option>
                  <option value="JRO">JRO</option>
                  <option value="SPRO">SPRO</option>
                  <option value="BRO">BRO</option>
                  <option value="CJRO">CJRO</option>
                  <option value="CSRO">CSRO</option>
                  <option value="NSRO">NSRO</option>
                  <option value="SSRO">SSRO</option>
                </select>

                <select
                  className="px-3 py-2 border border-input rounded-md bg-background text-foreground"
                  value={vendorFilter}
                  onChange={(e) => handleVendorFilter(e.target.value)}
                >
                  <option value="all">All Vendors</option>
                  <option value="PTHWI">Huawei</option>
                  <option value="PTNOK">Nokia</option>
                  <option value="PTERI">Ericsson</option>
                </select>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Sites Grid */}
        {loading ? (
          <div className="flex items-center justify-center py-12">
            <RefreshCw className="h-8 w-8 animate-spin text-muted-foreground" />
            <span className="ml-2 text-muted-foreground">Loading 5G sites...</span>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {sites.map((site: SiteData5G) => (
              <Card key={site.system_key} className="hover:shadow-lg transition-shadow">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div>
                      <CardTitle className="text-lg">{site.site_name}</CardTitle>
                      <CardDescription className="text-sm text-muted-foreground">
                        {site.site_id}
                      </CardDescription>
                    </div>
                    <Badge className={getStatusColor(site.site_status)}>
                      {site.site_status}
                    </Badge>
                  </div>
                </CardHeader>
                
                <CardContent className="space-y-3">
                  <div className="flex items-center space-x-2">
                    <Building2 className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm">{site.vendor_name}</span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <MapPin className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm">{site.region}</span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <Signal className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm">{site["SBOQ.project_type"]}</span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <Calendar className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm">Year: {site.year}</span>
                  </div>
                  
                  {site["5g_readiness_date"] && (
                    <div className="flex items-center space-x-2">
                      <TrendingUp className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm">5G Ready: {new Date(site["5g_readiness_date"]).toLocaleDateString()}</span>
                    </div>
                  )}
                  
                  {site["5g_activation_date"] && (
                    <div className="flex items-center space-x-2">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <span className="text-sm text-green-600">5G Active: {new Date(site["5g_activation_date"]).toLocaleDateString()}</span>
                    </div>
                  )}
                  
                  <div className="pt-2 border-t">
                    <Badge className={getAcceptanceStatusColor(site.cx_acceptance_status)}>
                      CX: {site.cx_acceptance_status}
                    </Badge>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}

        {!loading && sites.length === 0 && (
          <div className="text-center py-12">
            <AlertCircle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-medium text-foreground mb-2">No sites found</h3>
            <p className="text-muted-foreground">
              Try adjusting your search or filter criteria
            </p>
          </div>
        )}
      </div>
    </div>
  )
} 