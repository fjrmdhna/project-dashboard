version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: project_dashboard_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-project_dashboard}
      POSTGRES_USER: ${POSTGRES_USER:-project_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-projectpassword}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - project_dashboard_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-project_user} -d ${POSTGRES_DB:-project_dashboard}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: project_dashboard_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - project_dashboard_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    container_name: project_dashboard_app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-project_user}:${POSTGRES_PASSWORD:-projectpassword}@postgres:5432/${POSTGRES_DB:-project_dashboard}
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - project_dashboard_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  project_dashboard_network:
    driver: bridge 